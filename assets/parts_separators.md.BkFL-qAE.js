import{_ as t,c as a,o,ae as r}from"./chunks/framework.1y2w2LY9.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"_parts/separators.md","filePath":"docs/_parts/separators.md"}'),n={name:"_parts/separators.md"};function i(d,e,s,l,c,p){return o(),a("div",null,[...e[0]||(e[0]=[r('<p>The rule supports different naming conventions for BEM entities by allowing you to configure the separators between block elements, modifiers, and modifier values.</p><p>This flexibility ensures compatibility with all popular BEM styles described in the official <a href="https://en.bem.info/methodology/naming-convention/" target="_blank" rel="noreferrer">BEM methodology naming convention</a> or even custom ones.</p><h4 id="available-separators" tabindex="-1">Available separators <a class="header-anchor" href="#available-separators" aria-label="Permalink to &quot;Available separators&quot;">â€‹</a></h4><table tabindex="0"><thead><tr><th>Option</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>element</code></td><td><code>__</code></td><td>Separator between block and element.</td></tr><tr><td><code>modifier</code></td><td><code>--</code></td><td>Separator between block/element and modifier name.</td></tr><tr><td><code>modifierValue</code></td><td><code>--</code></td><td>Separator between modifier name and modifier value.</td></tr></tbody></table><div class="info custom-block"><p class="custom-block-title">Rule is separator-agnostic</p><p>You can adapt this rule to any BEM naming convention using the available options. <br> For details on naming principles, refer to the official <a href="https://en.bem.info/methodology/naming-convention/" target="_blank" rel="noreferrer">BEM methodology guide</a>.</p></div>',5)])])}const h=t(n,[["render",i]]);export{f as __pageData,h as default};
